type User
  @model(subscriptions: null)
  @key(name: "getByUsername", fields: ["username"], queryField: "getByUsername")
  @key(name: "getIfF1", fields: ["friend1"], queryField: "getIfF1")
  @key(name: "getIfF2", fields: ["friend2"], queryField: "getIfF2")
  @key(name: "getIfF3", fields: ["friend3"], queryField: "getIfF3")
  @auth(rules: [{ allow: owner }, { allow: private }]) {
  username: String!
  lat: String
  long:String
  friend1: String
  friend1avil: Boolean
  friend2: String
  friend2avil: Boolean
  friend3: String
  friend3avil: Boolean
  name: String
  availability: Boolean
}

type Event
  @model(subscriptions: null)
  @key(name: "getEventByToUser", fields: ["toUser"], queryField: "getEventByToUser")
  @key(name: "getEventByFromUser", fields: ["fromUser"], queryField: "getEventByFromUser")
  @auth(rules: [{ allow: owner }, { allow: private }]) {
  toUser: String!
  fromUser: String!
  location: String
  meetTime: String
  accepted: Boolean
  phoneNo: String
  notes: String
}

type FriendRequest
  @model(subscriptions: null)
  @key(name: "getReqByToUser", fields: ["toUser"], queryField: "getReqByToUser")
  @auth(rules: [{ allow: owner }, { allow: private }]) {
  fromUser: String
  fromUserId: String
  toUser: String!
  toUserId: String
  toUserResponse: Boolean
}
